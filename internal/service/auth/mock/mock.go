// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	domain "github.com/volkowlad/gRPC/internal/domain"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockRepository) Login(ctx context.Context, username string) (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, username)
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockRepositoryMockRecorder) Login(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockRepository)(nil).Login), ctx, username)
}

// RefreshTokenCheck mocks base method.
func (m *MockRepository) RefreshTokenCheck(ctx context.Context, tokenID uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokenCheck", ctx, tokenID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshTokenCheck indicates an expected call of RefreshTokenCheck.
func (mr *MockRepositoryMockRecorder) RefreshTokenCheck(ctx, tokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokenCheck", reflect.TypeOf((*MockRepository)(nil).RefreshTokenCheck), ctx, tokenID)
}

// RefreshTokenSaver mocks base method.
func (m *MockRepository) RefreshTokenSaver(ctx context.Context, refreshToken domain.RefreshToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokenSaver", ctx, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshTokenSaver indicates an expected call of RefreshTokenSaver.
func (mr *MockRepositoryMockRecorder) RefreshTokenSaver(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokenSaver", reflect.TypeOf((*MockRepository)(nil).RefreshTokenSaver), ctx, refreshToken)
}

// RefreshUpdate mocks base method.
func (m *MockRepository) RefreshUpdate(ctx context.Context, token domain.RefreshToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshUpdate", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshUpdate indicates an expected call of RefreshUpdate.
func (mr *MockRepositoryMockRecorder) RefreshUpdate(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshUpdate", reflect.TypeOf((*MockRepository)(nil).RefreshUpdate), ctx, token)
}

// UserByID mocks base method.
func (m *MockRepository) UserByID(ctx context.Context, id uuid.UUID) (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByID", ctx, id)
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByID indicates an expected call of UserByID.
func (mr *MockRepositoryMockRecorder) UserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByID", reflect.TypeOf((*MockRepository)(nil).UserByID), ctx, id)
}

// UserByUsername mocks base method.
func (m *MockRepository) UserByUsername(ctx context.Context, username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByUsername", ctx, username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByUsername indicates an expected call of UserByUsername.
func (mr *MockRepositoryMockRecorder) UserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByUsername", reflect.TypeOf((*MockRepository)(nil).UserByUsername), ctx, username)
}

// UserSaver mocks base method.
func (m *MockRepository) UserSaver(ctx context.Context, email string, passHash []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSaver", ctx, email, passHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserSaver indicates an expected call of UserSaver.
func (mr *MockRepositoryMockRecorder) UserSaver(ctx, email, passHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSaver", reflect.TypeOf((*MockRepository)(nil).UserSaver), ctx, email, passHash)
}
